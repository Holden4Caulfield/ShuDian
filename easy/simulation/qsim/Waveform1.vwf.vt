// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2018 16:16:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          si
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module si_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire E;
wire F;
wire G;
wire G1;
wire G2;
wire H;
wire pin_name1;
wire R1;
wire R2;
wire Y1;
wire Y2;

// assign statements (if any)                          
si i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.CLK(CLK),
	.d(d),
	.E(E),
	.F(F),
	.G(G),
	.G1(G1),
	.G2(G2),
	.H(H),
	.pin_name1(pin_name1),
	.R1(R1),
	.R2(R2),
	.Y1(Y1),
	.Y2(Y2)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
endmodule

